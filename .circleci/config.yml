version: 2

jobs:
  build:
    docker:
      - image: openjdk:8-jdk
    environment:
      _JAVA_OPTIONS: "-Xmx3G -Xms2G"
    resource_class: medium+
    steps:
      - checkout
      - run: apt update -y && apt install -y gnupg2 jq
      - run: curl -sSL https://secchannel.rsk.co/release.asc | gpg2 --import -
      - run: gpg2 --verify SHA256SUMS.asc && sha256sum --check SHA256SUMS.asc
      - run: ./configure.sh
      - run: ./gradlew --no-daemon dependencies
      - run: ./gradlew --no-daemon --stacktrace build
      - run:
          name: Run SonarQube analysis
          # https://community.sonarsource.com/t/no-code-or-issue-found-in-pull-request-decorations-github-circleci/8496
          command: |
            if [ ! -z $CIRCLE_PULL_REQUEST ]; then
              PULL_REQUEST=$(echo $CIRCLE_PULL_REQUEST | awk '{print substr($1,39)}')
              git branch -f master origin/master
              ./gradlew sonarqube --no-daemon -x build -x test \
                -Dsonar.pullrequest.base=master \
                -Dsonar.pullrequest.branch=$CIRCLE_BRANCH \
                -Dsonar.pullrequest.key=$PULL_REQUEST \
                -Dsonar.organization=rsksmart \
                -Dsonar.host.url=$SONAR_URL \
                -Dsonar.login=$SONAR_TOKEN
            else
              ./gradlew sonarqube --no-daemon -x build -x test \
                -Dsonar.branch.name=master \
                -Dsonar.organization=rsksmart \
                -Dsonar.host.url=$SONAR_URL \
                -Dsonar.login=$SONAR_TOKEN
            fi
      - run:
          name: Mining integration tests
          command: |
            wait_for_completion() {
              # inspired from https://discuss.circleci.com/t/waiting-for-build-to-complete-when-invoked-via-http-api/14989
              build_number=$1
              poll_interval=60

              i=0
              max_count=20
              while [ $i -lt $max_count ]; do
                # output to avoid CircleCI considering the job stuck
                res=$(curl -Ssfu "$CIRCLE_INTEGRATIONS_TOKENS:" \
                    "https://circleci.com/api/v1.1/project/github/$MIT_ORGANIZATION/$MIT_PROJECT/$build_number" \
                    | jq -r '[.lifecycle, .outcome] | @tsv')
                IFS="	" set -- $res
                lifecycle=${1:-}
                outcome=${2:-}
                if [ "$lifecycle" = "queued" ]; then
                  printf "Build is enqueued. Waiting...\n"
                  # don't increment $i
                else
                  printf "[%02u/%02u] Waiting for build %s ...\n" \
                      "$i" "$max_count" "$build_url"
                  i=$(($i + 1))
                fi
                if [ "$lifecycle" = "finished" ]; then
                  printf "Build %u finished. Outcome: \"%s\".\n" \
                      "$build_number" "$outcome"
                  # return success iff job outcome is "success"
                  test "$outcome" = "success"
                  return $?
                fi

                sleep $poll_interval
              done
              return 1
            }

            json_payload='{
              "build_parameters": {
                "RSKJ_CIRCLE_BRANCH": "'$CIRCLE_BRANCH'",
                "RSKJ_CIRCLE_USERNAME": "'${CIRCLE_PR_USERNAME:-$CIRCLE_PROJECT_USERNAME}'",
                "RSKJ_CIRCLE_REPONAME": "'${CIRCLE_PR_REPONAME:-$CIRCLE_PROJECT_REPONAME}'",
                "RSKJ_CIRCLE_SHA1": "'$CIRCLE_SHA1'"
              }
            }'
            res=$(curl -Ssfu "$CIRCLE_INTEGRATIONS_TOKEN:" -H "Content-type: application/json" -d "$json_payload" \
                "https://circleci.com/api/v1.1/project/github/$MIT_ORGANIZATION/$MIT_PROJECT/tree/$MIT_BRANCH" \
                | jq -r '[.build_url, .build_num] | @tsv')
            IFS="	" set -- $res
            test $# -eq 2 # ensure exactly 2 values are expanded
            build_url=$1
            build_num=$2
            printf "Running mining integration tests. Follow it on:\n\n    %s\n\n" "$build_url"
            sleep 10 # give CircleCI some time to spin up the job
            wait_for_completion "$build_num"
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
